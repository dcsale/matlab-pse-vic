function w_du = vortex_stretch(SIM, MESH, wf, uf)
% compute the velocity gradient
% [dx_ufx, dy_ufx, dz_ufx] = gradient(uf{1}, MESH.dx(1), MESH.dx(2), MESH.dx(3));
% [dx_ufy, dy_ufy, dz_ufy] = gradient(uf{2}, MESH.dx(1), MESH.dx(2), MESH.dx(3));
% [dx_ufz, dy_ufz, dz_ufz] = gradient(uf{3}, MESH.dx(1), MESH.dx(2), MESH.dx(3));

% compute the vorticity gradient
% [dx_wfx, dy_wfx, dz_wfx] = gradient(wf{1}, MESH.dx(1), MESH.dx(2), MESH.dx(3));
% [dx_wfy, dy_wfy, dz_wfy] = gradient(wf{2}, MESH.dx(1), MESH.dx(2), MESH.dx(3));
% [dx_wfz, dy_wfz, dz_wfz] = gradient(wf{3}, MESH.dx(1), MESH.dx(2), MESH.dx(3));

% compute the vortex stretching term
% w_du_x = wf{1}.*dx_ufx + wf{2}.*dy_ufx + wf{3}.*dz_ufx;
% w_du_y = wf{1}.*dx_ufy + wf{2}.*dy_ufy + wf{3}.*dz_ufy;
% w_du_z = wf{1}.*dx_ufz + wf{2}.*dy_ufz + wf{3}.*dz_ufz;
% w_du   = {w_du_x; w_du_y; w_du_z};

% compute the vortex stretching term
sf     = strain_rate(SIM, MESH, uf);
sf = {dudx, dvdx, dwdx; ...
      dudy, dvdy, dwdy; ...
      dudz, dvdz, dwdz};
  
w_du_x = wf{1}.*sf{1,1} + wf{2}.*sf{2,1} + wf{3}.*sf{3,1};
w_du_y = wf{1}.*sf{1,2} + wf{2}.*sf{2,2} + wf{3}.*sf{3,2};
w_du_z = wf{1}.*sf{1,3} + wf{2}.*sf{2,3} + wf{3}.*sf{3,3};
w_du   = {w_du_x; w_du_y; w_du_z};

end % function

function sf = strain_rate(SIM, MESH, uf)

%%------------------------------------------------------------------
% Compute maximum strainrate O(4) FD - converted from Naga code
%-------------------------------------------------------------------
% using ghost layers, only central difference formulas are needed.

facx = 1.0/(MESH.dx(1)*12.0);
facy = 1.0/(MESH.dx(2)*12.0);
facz = 1.0/(MESH.dx(3)*12.0);
for k = 1+SIM.mbc:MESH.NX(3)
    for j = 1+SIM.mbc:MESH.NX(2)
        for i = 1+SIM.mbc:MESH.NX(1)
            dudx =  -    facx*uf{1}(i+2,j  ,k  ) ...
                    +8.0*facx*uf{1}(i+1,j  ,k  ) ...
                    -8.0*facx*uf{1}(i-1,j  ,k  ) ...
                    +    facx*uf{1}(i-2,j  ,k  );
         
            dvdx =  -    facx*uf{2}(i+2,j  ,k  ) ...
                    +8.0*facx*uf{2}(i+1,j  ,k  ) ...
                    -8.0*facx*uf{2}(i-1,j  ,k  ) ...
                    +    facx*uf{2}(i-2,j  ,k  );
      
            dwdx =  -    facx*uf{3}(i+2,j  ,k  ) ...
                    +8.0*facx*uf{3}(i+1,j  ,k  ) ...
                    -8.0*facx*uf{3}(i-1,j  ,k  ) ...
                    +    facx*uf{3}(i-2,j  ,k  );
                
            dudy =  -    facy*uf{1}(i  ,j+2,k  ) ...
                    +8.0*facy*uf{1}(i  ,j+1,k  ) ...
                    -8.0*facy*uf{1}(i  ,j-1,k  ) ...
                    +    facy*uf{1}(i  ,j-2,k  );
                
            dvdy =  -    facy*uf{2}(i  ,j+2,k  ) ...
                    +8.0*facy*uf{2}(i  ,j+1,k  ) ...
                    -8.0*facy*uf{2}(i  ,j-1,k  ) ...
                    +    facy*uf{2}(i  ,j-2,k  );
                
            dwdy =  -    facy*uf{3}(i  ,j+2,k  ) ...
                    +8.0*facy*uf{3}(i  ,j+1,k  ) ...
                    -8.0*facy*uf{3}(i  ,j-1,k  ) ...
                    +    facy*uf{3}(i  ,j-2,k  );
                
            dudz =  -    facz*uf{1}(i  ,j  ,k+2) ...
                    +8.0*facz*uf{1}(i  ,j  ,k+1) ...
                    -8.0*facz*uf{1}(i  ,j  ,k-1) ...
                    +    facz*uf{1}(i  ,j  ,k-2);
                
            dvdz =  -    facz*uf{2}(i  ,j  ,k+2) ...
                    +8.0*facz*uf{2}(i  ,j  ,k+1) ...
                    -8.0*facz*uf{2}(i  ,j  ,k-1) ...
                    +    facz*uf{2}(i  ,j  ,k-2);
                
            dwdz =  -    facz*uf{3}(i  ,j  ,k+2) ...
                    +8.0*facz*uf{3}(i  ,j  ,k+1) ...
                    -8.0*facz*uf{3}(i  ,j  ,k-1) ...
                    +    facz*uf{3}(i  ,j  ,k-2);
        end
    end
end

% field gradient 
sf = {dudx, dvdx, dwdx; ...
      dudy, dvdy, dwdy; ...
      dudz, dvdz, dwdz};
  
end % function


