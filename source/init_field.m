% [fieldk, fieldxf_cen, fieldx_ext, fieldr_ext, NX, vort] = init_field(NXs, SIM.testcase, plot_InitField);
function vort = init_field(CTRL, SIM, MESH)

%----------------------------------------------------------------------
% Vorticity distribution
%----------------------------------------------------------------------
vort{1} = zeros(MESH.NX(1)+2*SIM.mbc, MESH.NX(2)+2*SIM.mbc, MESH.NX(3)+2*SIM.mbc);
vort{2} = zeros(MESH.NX(1)+2*SIM.mbc, MESH.NX(2)+2*SIM.mbc, MESH.NX(3)+2*SIM.mbc);
vort{3} = zeros(MESH.NX(1)+2*SIM.mbc, MESH.NX(2)+2*SIM.mbc, MESH.NX(3)+2*SIM.mbc);

c = SIM.param.c;
R = SIM.param.R;
if SIM.testcase == 1 
    % Bump function: SPHERICAL SCALAR FIELD
    r_cen = sqrt(MESH.xf_cen{1}.^2 + ...
                 MESH.xf_cen{2}.^2 + ...
                 MESH.xf_cen{3}.^2);

    vort{2}(r_cen < R) = 2*c*R^2*exp(-c*R^2./((R - r_cen(r_cen < R))...
        .*(R + r_cen(r_cen < R)))).*(3*R^4 - 2*R^2*r_cen(r_cen < R).^2 ...
        - r_cen(r_cen < R).^4 - 2*c*R^2*r_cen(r_cen < R).^2) ...
        .*(R^2 - r_cen(r_cen < R).^2).^(-4);

elseif SIM.testcase == 2 
    % Bump function: VORTEX RING (in the xy-plane)
    vort_mag = zeros(size(vort{1}));
    r_cen    = sqrt(MESH.xf_cen{1}.^2 + MESH.xf_cen{2}.^2);
    phi_cen  = sqrt((r_cen-R).^2 + MESH.xf_cen{3}.^2);
    theta    = atan2(MESH.xf_cen{2},MESH.xf_cen{1});

    vort_mag(phi_cen < R) = exp(-c*R^2./(2*R*r_cen(phi_cen < R) - ...
        r_cen(phi_cen < R).^2 - MESH.xf_cen{3}(phi_cen < R).^2)) ...
        .*(4*c^2*R^4*MESH.xf_cen{3}(phi_cen < R).^2.*r_cen(phi_cen < R).^2 ...
        - 16*R^4*r_cen(phi_cen < R).^4 ...
        + 32*R^3*r_cen(phi_cen < R).^5 ...
        - 24*R^2*r_cen(phi_cen < R).^6 ...
        + 8*R*r_cen(phi_cen < R).^7 ...
        - 4*r_cen(phi_cen < R).^6.*MESH.xf_cen{3}(phi_cen < R).^2 ...
        - 6*r_cen(phi_cen < R).^4.*MESH.xf_cen{3}(phi_cen < R).^4 ...
        - 4*r_cen(phi_cen < R).^2.*MESH.xf_cen{3}(phi_cen < R).^6 ...
        - 8*c*R^5*r_cen(phi_cen < R).^3 ...
        + 8*c*R^4*r_cen(phi_cen < R).^4 ...
        - 6*c*R^3*r_cen(phi_cen < R).^5 ...
        + 4*c^2*R^6*r_cen(phi_cen < R).^2 ...
        - 8*c^2*R^5*r_cen(phi_cen < R).^3 ...
        + 4*c^2*R^4*r_cen(phi_cen < R).^4 ...
        + 2*c*R^2*r_cen(phi_cen < R).^6 ...
        + 32*R^3*r_cen(phi_cen < R).^3.*MESH.xf_cen{3}(phi_cen < R).^2 ...
        - 48*R^2*r_cen(phi_cen < R).^4.*MESH.xf_cen{3}(phi_cen < R).^2 ...
        - 24*R^2*r_cen(phi_cen < R).^2.*MESH.xf_cen{3}(phi_cen < R).^4 ...
        + 24*R*r_cen(phi_cen < R).^5.*MESH.xf_cen{3}(phi_cen < R).^2 ...
        + 24*R*r_cen(phi_cen < R).^3.*MESH.xf_cen{3}(phi_cen < R).^4 ...
        + 8*R*r_cen(phi_cen < R).*MESH.xf_cen{3}(phi_cen < R).^6 ...
        + 2*c*R^3*r_cen(phi_cen < R).*MESH.xf_cen{3}(phi_cen < R).^4 ...
        + 2*c*R^2*r_cen(phi_cen < R).^2.*MESH.xf_cen{3}(phi_cen < R).^4 ...
        - 4*c*R^3*r_cen(phi_cen < R).^3.*MESH.xf_cen{3}(phi_cen < R).^2 ...
        + 4*c*R^2*r_cen(phi_cen < R).^4.*MESH.xf_cen{3}(phi_cen < R).^2 ...
        - r_cen(phi_cen < R).^8 - MESH.xf_cen{3}(phi_cen < R).^8) ...
        .*(2*R*r_cen(phi_cen < R) - ...
        r_cen(phi_cen < R).^2 - MESH.xf_cen{3}(phi_cen < R).^2).^(-4) ...
        .*r_cen(phi_cen < R).^(-2);

    vort{1} = sin(theta).*vort_mag;
    vort{2} = -cos(theta).*vort_mag;
%     vort{3} = 0   already initialized as zero
%     vort{3} = zeros(MESH.NX(1),MESH.NX(2),MESH.NX(3));

end
        
end % function init_field()

