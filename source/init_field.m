% [fieldk, fieldxf_cen, fieldx_ext, fieldr_ext, NX, vort] = init_field(NXs, Sim.testcase, plot_InitField);
function vort = init_field(Sim,Mesh)

%----------------------------------------------------------------------
% Vorticity distribution
%----------------------------------------------------------------------
vort{1} = zeros(Mesh.NX(1), Mesh.NX(2), Mesh.NX(3));
vort{2} = zeros(Mesh.NX(1), Mesh.NX(2), Mesh.NX(3));
vort{3} = zeros(Mesh.NX(1), Mesh.NX(2), Mesh.NX(3));

c = Sim.param.c;
R = Sim.param.R;
if Sim.testcase == 1 
    % Bump function: SPHERICAL SCALAR FIELD
    Mesh.r_cen = sqrt(Mesh.xf_cen{1}.^2 + ...
                      Mesh.xf_cen{2}.^2 + ...
                      Mesh.xf_cen{3}.^2);

    vort{2}(Mesh.r_cen < R) = 2*c*R^2*exp(-c*R^2./((R - Mesh.r_cen(Mesh.r_cen < R))...
        .*(R + Mesh.r_cen(Mesh.r_cen < R)))).*(3*R^4 - 2*R^2*Mesh.r_cen(Mesh.r_cen < R).^2 ...
        - Mesh.r_cen(Mesh.r_cen < R).^4 - 2*c*R^2*Mesh.r_cen(Mesh.r_cen < R).^2) ...
        .*(R^2 - Mesh.r_cen(Mesh.r_cen < R).^2).^(-4);

elseif Sim.testcase == 2 
    % Bump function: VORTEX RING (in the xy-plane)
    vort_mag      = zeros(Mesh.NX(1), Mesh.NX(2), Mesh.NX(3));
    Mesh.r_cen    = sqrt(Mesh.xf_cen{1}.^2 + Mesh.xf_cen{2}.^2);
    Mesh.phi_cen  = sqrt((Mesh.r_cen-R).^2 + Mesh.xf_cen{3}.^2);
    Mesh.theta    = atan2(Mesh.xf_cen{2},Mesh.xf_cen{1});

    vort_mag(Mesh.phi_cen < R) = exp(-c*R^2./(2*R*Mesh.r_cen(Mesh.phi_cen < R) - ...
        Mesh.r_cen(Mesh.phi_cen < R).^2 - Mesh.xf_cen{3}(Mesh.phi_cen < R).^2)) ...
        .*(4*c^2*R^4*Mesh.xf_cen{3}(Mesh.phi_cen < R).^2.*Mesh.r_cen(Mesh.phi_cen < R).^2 ...
        - 16*R^4*Mesh.r_cen(Mesh.phi_cen < R).^4 ...
        + 32*R^3*Mesh.r_cen(Mesh.phi_cen < R).^5 ...
        - 24*R^2*Mesh.r_cen(Mesh.phi_cen < R).^6 ...
        + 8*R*Mesh.r_cen(Mesh.phi_cen < R).^7 ...
        - 4*Mesh.r_cen(Mesh.phi_cen < R).^6.*Mesh.xf_cen{3}(Mesh.phi_cen < R).^2 ...
        - 6*Mesh.r_cen(Mesh.phi_cen < R).^4.*Mesh.xf_cen{3}(Mesh.phi_cen < R).^4 ...
        - 4*Mesh.r_cen(Mesh.phi_cen < R).^2.*Mesh.xf_cen{3}(Mesh.phi_cen < R).^6 ...
        - 8*c*R^5*Mesh.r_cen(Mesh.phi_cen < R).^3 ...
        + 8*c*R^4*Mesh.r_cen(Mesh.phi_cen < R).^4 ...
        - 6*c*R^3*Mesh.r_cen(Mesh.phi_cen < R).^5 ...
        + 4*c^2*R^6*Mesh.r_cen(Mesh.phi_cen < R).^2 ...
        - 8*c^2*R^5*Mesh.r_cen(Mesh.phi_cen < R).^3 ...
        + 4*c^2*R^4*Mesh.r_cen(Mesh.phi_cen < R).^4 ...
        + 2*c*R^2*Mesh.r_cen(Mesh.phi_cen < R).^6 ...
        + 32*R^3*Mesh.r_cen(Mesh.phi_cen < R).^3.*Mesh.xf_cen{3}(Mesh.phi_cen < R).^2 ...
        - 48*R^2*Mesh.r_cen(Mesh.phi_cen < R).^4.*Mesh.xf_cen{3}(Mesh.phi_cen < R).^2 ...
        - 24*R^2*Mesh.r_cen(Mesh.phi_cen < R).^2.*Mesh.xf_cen{3}(Mesh.phi_cen < R).^4 ...
        + 24*R*Mesh.r_cen(Mesh.phi_cen < R).^5.*Mesh.xf_cen{3}(Mesh.phi_cen < R).^2 ...
        + 24*R*Mesh.r_cen(Mesh.phi_cen < R).^3.*Mesh.xf_cen{3}(Mesh.phi_cen < R).^4 ...
        + 8*R*Mesh.r_cen(Mesh.phi_cen < R).*Mesh.xf_cen{3}(Mesh.phi_cen < R).^6 ...
        + 2*c*R^3*Mesh.r_cen(Mesh.phi_cen < R).*Mesh.xf_cen{3}(Mesh.phi_cen < R).^4 ...
        + 2*c*R^2*Mesh.r_cen(Mesh.phi_cen < R).^2.*Mesh.xf_cen{3}(Mesh.phi_cen < R).^4 ...
        - 4*c*R^3*Mesh.r_cen(Mesh.phi_cen < R).^3.*Mesh.xf_cen{3}(Mesh.phi_cen < R).^2 ...
        + 4*c*R^2*Mesh.r_cen(Mesh.phi_cen < R).^4.*Mesh.xf_cen{3}(Mesh.phi_cen < R).^2 ...
        - Mesh.r_cen(Mesh.phi_cen < R).^8 - Mesh.xf_cen{3}(Mesh.phi_cen < R).^8) ...
        .*(2*R*Mesh.r_cen(Mesh.phi_cen < R) - ...
        Mesh.r_cen(Mesh.phi_cen < R).^2 - Mesh.xf_cen{3}(Mesh.phi_cen < R).^2).^(-4) ...
        .*Mesh.r_cen(Mesh.phi_cen < R).^(-2);

    vort{1} = sin(Mesh.theta).*vort_mag;
    vort{2} = -cos(Mesh.theta).*vort_mag;
    vort{3} = zeros(Mesh.NX(1),Mesh.NX(2),Mesh.NX(3));

end
        
end % function init_field()

