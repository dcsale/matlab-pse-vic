function [rhs_x, rhs_y, rhs_z] = get_RHS_gpu_v1(rx, ...
                                                ry, ...
                                                rz, ...
                                                hp, ...
                                                ap_x, ...
                                                ap_y, ...
                                                ap_z, ...
                                                ap_xP, ...
                                                ap_yP, ...
                                                ap_zP, ...
                                                kin_visc)
                                            
                                            % notes: should this fct also
                                            % return the velocity of the
                                            % particles including vel_P2P()
% [u_x_pc, u_y_pc, u_z_pc] = induce_vel_gpu_v1(rx, ...
%                                              ry, ...
%                                              rz, ...
%                                              hp, ...
%                                              ap_x, ...
%                                              ap_y, ...
%                                              ap_z)
                                              
                                            
hp2     = hp^2;
hp4     = hp^4;
volp    = hp^3;
r_mag   = sqrt( rx^2 + ry^2 + rz^2 );
r_mag2  = r_mag^2;
fac1    = (r_mag2 + 5/2*hp2) / ((r_mag + hp2)^(5/2));
[trm1_x, trm1_y, trm1_z] = crossf(fac1*ap_xP, fac1*ap_yP, fac1*ap_zP, ...
                                  ap_x,       ap_y,       ap_z);
[fac2_x, fac2_y, fac2_z]    = crossf(rx, ry, rz, ap_x, ap_y, ap_z);
fac3    = ap_xP*fac2_x + ap_yP*fac2_y + ap_zP* fac2_z;
fac4    = 3 * (r_mag2 + 7/2*hp2) / ((r_mag2 + hp2)^(7/2));
trm2_x  = (fac4 * fac3) * rx;
trm2_y  = (fac4 * fac3) * ry;
trm2_z  = (fac4 * fac3) * rz;
fac5    = 105 * kin_visc * hp4 / ((r_mag2 + hp2)^(9/2));
fac6_x  = volp*ap_x - volp*ap_xP;
fac6_y  = volp*ap_y - volp*ap_yP;
fac6_z  = volp*ap_z - volp*ap_zP;
trm3_x  = fac5 * fac6_x;
trm3_y  = fac5 * fac6_y;
trm3_z  = fac5 * fac6_z;

rhs_x   = -1/(4*pi) * (trm1_x + trm2_x + trm3_x);
rhs_y   = -1/(4*pi) * (trm1_y + trm2_y + trm3_y);
rhs_z   = -1/(4*pi) * (trm1_z + trm2_z + trm3_z);

end % function

