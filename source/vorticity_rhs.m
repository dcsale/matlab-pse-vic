function dwf = vorticity_rhs(SIM, MESH, wf, uf)

% compute the strain and rotation tensors
[S, R] = tensors(SIM, MESH, wf, uf);

% compute the vortex stretching term
w_du_x = wf{1}.*S{1,1} + wf{2}.*S{1,2} + wf{3}.*S{1,3};
w_du_y = wf{1}.*S{2,1} + wf{2}.*S{2,2} + wf{3}.*S{2,3};
w_du_z = wf{1}.*S{3,1} + wf{2}.*S{3,2} + wf{3}.*S{3,3};
dwf    = {w_du_x; w_du_y; w_du_z};

end % function

function [S, R] = tensors(SIM, MESH, wf, uf)

%%------------------------------------------------------------------
% O(4) Finite Difference - converted from Naga code
%-------------------------------------------------------------------
% using ghost layers, only central difference formulas are needed.

facx = 1.0/(MESH.dx(1)*12.0);
facy = 1.0/(MESH.dx(2)*12.0);
facz = 1.0/(MESH.dx(3)*12.0);
for k = 1+SIM.mbc:MESH.NX(3)
    for j = 1+SIM.mbc:MESH.NX(2)
        for i = 1+SIM.mbc:MESH.NX(1)
            dudx =  -    facx*uf{1}(i+2,j  ,k  ) ...
                    +8.0*facx*uf{1}(i+1,j  ,k  ) ...
                    -8.0*facx*uf{1}(i-1,j  ,k  ) ...
                    +    facx*uf{1}(i-2,j  ,k  );
         
            dvdx =  -    facx*uf{2}(i+2,j  ,k  ) ...
                    +8.0*facx*uf{2}(i+1,j  ,k  ) ...
                    -8.0*facx*uf{2}(i-1,j  ,k  ) ...
                    +    facx*uf{2}(i-2,j  ,k  );
      
            dwdx =  -    facx*uf{3}(i+2,j  ,k  ) ...
                    +8.0*facx*uf{3}(i+1,j  ,k  ) ...
                    -8.0*facx*uf{3}(i-1,j  ,k  ) ...
                    +    facx*uf{3}(i-2,j  ,k  );
                
            dudy =  -    facy*uf{1}(i  ,j+2,k  ) ...
                    +8.0*facy*uf{1}(i  ,j+1,k  ) ...
                    -8.0*facy*uf{1}(i  ,j-1,k  ) ...
                    +    facy*uf{1}(i  ,j-2,k  );
                
            dvdy =  -    facy*uf{2}(i  ,j+2,k  ) ...
                    +8.0*facy*uf{2}(i  ,j+1,k  ) ...
                    -8.0*facy*uf{2}(i  ,j-1,k  ) ...
                    +    facy*uf{2}(i  ,j-2,k  );
                
            dwdy =  -    facy*uf{3}(i  ,j+2,k  ) ...
                    +8.0*facy*uf{3}(i  ,j+1,k  ) ...
                    -8.0*facy*uf{3}(i  ,j-1,k  ) ...
                    +    facy*uf{3}(i  ,j-2,k  );
                
            dudz =  -    facz*uf{1}(i  ,j  ,k+2) ...
                    +8.0*facz*uf{1}(i  ,j  ,k+1) ...
                    -8.0*facz*uf{1}(i  ,j  ,k-1) ...
                    +    facz*uf{1}(i  ,j  ,k-2);
                
            dvdz =  -    facz*uf{2}(i  ,j  ,k+2) ...
                    +8.0*facz*uf{2}(i  ,j  ,k+1) ...
                    -8.0*facz*uf{2}(i  ,j  ,k-1) ...
                    +    facz*uf{2}(i  ,j  ,k-2);
                
            dwdz =  -    facz*uf{3}(i  ,j  ,k+2) ...
                    +8.0*facz*uf{3}(i  ,j  ,k+1) ...
                    -8.0*facz*uf{3}(i  ,j  ,k-1) ...
                    +    facz*uf{3}(i  ,j  ,k-2);
        end
    end
end

% rate of strain tensor (symmetric)
S = {          dudx, (dudy+dvdx)./2, (dudz+dwdx)./2; ...
     (dvdx+dudy)./2,           dvdy, (dvdz+dwdy)./2; ...
     (dwdx+dudz)./2, (dwdy+dvdz)./2,           dwdz};
 
% rotation 'vorticity' tensor (anti-symmetric)
R = {        0,  wf{3}./2, -wf{2}./2; ...
     -wf{3}./2,         0,  wf{1}./2; ...
      wf{2}./2, -wf{1}./2,         0};
  
end % function


