    The ParticleFSI code simulates the Navier-Stokes equations using some parallel particle-mesh methods. Current implementations include particle strength exchange (PSE) method and vortex-in-cell (VIC) method (start with [1] and [2] for more details).  Written in Matlab, this prototype code is also helping to learn about:
    
    1) developing and benchmarking algorithms using multicore CPUs and GPUs
    2) developing routines for pre- and post-processing of particle/mesh "big data"
    3) running batch jobs on clusters and cloud based computing platforms (e.g. OpenStack, Amazon-EC2)
    
    ParticleFSI is raw, but appears to be nutricious.
     
    License: LGPL

    Danny Clay Sale
    University of Washington
    2013

### Some ideas for improvement...
generally, ideas are listed with priority                      within each section

### GOVERNING EQUATIONS
* add staggered meshes. On a staggered grid the scalar variables (pressure, density, total enthalpy etc.) are stored in the cell centers of the control volumes, whereas the velocity or momentum variables are located at the cell faces. This is different from a collocated grid arrangement, where all variables are stored in the same positions.  Staggered grids are necessary to avoid pressure osciallations and difficulties of FD schemes.
* add Poisson solver with additional boundary conditions. Incompact3D (https://code.google.com/p/incompact3d/downloads/list or http://www.2decomp.org/download.html) seems to be the most flexible and efficient that I've found.
  * we need to solve the velocity and then pressure field by Poisson eqn (what kind of BC for each?)
* add particle tracking with Maxey-Riley equations (also see ref [3]). Just need gravity and drag forces for now.
  * enable 1-way coupling (easier), or ..
  * enable 2-way coupling (requires Vortex-in-Cell method w/ Poisson solver, but actually almost as easy!)
* for subgrid scale modeling, see the "method of local corrections" by [4,5], according to [2] this is an equivalent altenative to the "holy grail" Particle-Particle-Particle Mesh (P3M) method.  Okay, these acronyms get ridiculous now.
* add spatially varying cores to the Particle Strength Exchange method (see formulations in Cottet section 5.4.3 and refs)

### USABILITY
* rewrite using MatlabMPI in order to perform like MPI! http://www.ll.mit.edu/mission/isr/matlabmpi/matlabmpi.html
* add ability to pause/continue simulations.  Add ability to import initial field from VTK file (or other?) to continue where simulation left off.
* output to console runtime performance info in realtime (how to measure this in Matlab?)
  * estimate the total memory footprint and runtime, notify the user before in case of bogus input values
* send an email when the job is finished
  * I saw something on the Matlab File Exchange board a while ago...

### Outputs for Post-Processing (VisIt,Paraview,Vapor, ...)
* add derived expressions in VisIt
  * divergence of velocity and vorticity field (should be = 0 at all times, but helpful to visualize for debugging)
  * global diagnostics: KE, helicity, enstrophy
  * pressure, vortex stretching, diffusion, ...
* fix bug with VTK file output (w/ Matlab MEX capability, maybe use VTK writers from PPM Library or Deal.II)
* VisIt can only see vector magnitude and not individual components
* Paraview can only see the mesh data
* time values are not read correctly by VisIt or Paraview?
* add the H5part format for particle data: http://www-vis.lbl.gov/Research/AcceleratorSAPP/
* is it possible to visualize output in Vrui? http://idav.ucdavis.edu/~okreylos/ResDev/Vrui/
  * steroscopic output, CAVE, head mounted displays, wireless controllers?

### NUMERICAL ANALYSIS, CODING, and DEBUGGING ISSUES
* in PSE scheme improve method for setting initial condition of particle vorticity (i.e. make particle actually give a divergence free field)
  * can add relaxation methods to initial field to satisfy divergence critieria? (see Kosior 2012 and Cottet 2000?)


# DOCUMENTATION 
#### (this serves as a reminder to keep "docs" up-to-date)
* add unit tests, in Matlab 2013a unit testing framework was introduced: http://www.mathworks.com/help/matlab/matlab-unit-test-framework.html
* use Doxygen for Matlab, type up the governing equations in LaTeX and add to the comments in the code


# CASE STUDIES
### Vortex Rings
 * add radial and azimuthal instability modes
 * add ability to rotate ring initial angles (Euler) for maximum fun
 * create the vortex ring by a moving piston (would be a neat FSI test case)

### TURBINE / WING SIMULATIONS
* add [AirfoilPreppy](https://github.com/WISDEM/AirfoilPreppy) to lookup airfoil coefficients and deal w/ blade geometry setup & [CCBlade](https://github.com/WISDEM/CCBlade) coordinate systems
  * add 3D stall delay model from ref [3].  This method applies a correction to the 2D airfoil data, accounting for 3D (steady) effects. 
 * add Dynamic Stall model (Beddoes–Leishman?), this is an unsteady correction to the 2D airfoil data
* add a simple dynamics model for the turbine drive shaft (instead of prescribing the rotational velocity, compute it!)
* __HOLY GRAIL__: NREL integration with the WISDOM / FAST Modularization Framework providing a particle-mesh method replacement for the hydrodynamics in FAST.
  
### Jets / Propulsors
* add analytical potential fields for jets (Helmholtz decomposition)
 * rotational fields comes from PPM method



# REFERENCES
[1] G.S. Winckelmans (1993) Contributions to Vortex Particle Methods for the Computation of 3D Incompressible Unsteady Flows

[2] Georges-Henri Cottet and Petros D. Koumoutsakos (2000) Vortex Methods: Theory and Practice

[3] H. Dumitrescu, F. Frunzulica, and V. Cardos (2013) Improved Stall-Delay Model for Horizontal-Axis Wind Turbines

[4] C. Anderson (1986) A Method of Local Corrections for Computing the Velocity Field Due to a Distribution of Vortex Blobs

[5] P. McCorquodale (2007) A Local Corrections Algorithm for Solving Poisson�s Equation in Three Dimensions